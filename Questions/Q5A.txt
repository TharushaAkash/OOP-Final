Question 05 (Part A)
Question: The following NotificationService class violates the Dependency Inversion Principle by directly depending on concrete classes rather than abstractions. Refactor the code to follow DIP.

public class EmailService {
    public void sendEmail(String message) {
        System.out.println("Sending email: " + message);
    }
}

public class SMSService {
    public void sendSMS(String message) {
        System.out.println("Sending SMS: " + message);
    }
}

public class NotificationService {
    private EmailService emailService;
    private SMSService smsService;
    
    public NotificationService() {
        this.emailService = new EmailService(); // Direct dependency
        this.smsService = new SMSService();     // Direct dependency
    }
    
    public void sendNotification(String message, String type) {
        if (type.equals("email")) {
            emailService.sendEmail(message);
        } else if (type.equals("sms")) {
            smsService.sendSMS(message);
        }
    }
}

// Usage
public class Main {
    public static void main(String[] args) {
        NotificationService service = new NotificationService();
        service.sendNotification("Hello World", "email");
        service.sendNotification("Hello World", "sms");
    }
}
Task: Refactor the above code to follow the Dependency Inversion Principle. Use abstractions (interfaces) so that high-level modules don't depend directly on low-level modules.

